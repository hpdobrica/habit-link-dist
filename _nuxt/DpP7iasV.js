import{a as d,g as h}from"./0OK1zX_s.js";import{d as e}from"./5hOz_2Hu.js";import{bT as v}from"./Bdlf0Gjw.js";function f(n=new Date){return n.toISOString().split("T")[0]}const y=()=>{const n=d("habit-logs",()=>({})),o=d("routine-logs",()=>({})),g=d("stats-loading",()=>!0),l=async()=>{g.value=!0;try{const r=await e.habitLogs.toArray(),L=await e.routineLogs.toArray();Object.assign(n.value,Object.fromEntries(r.map(u=>[u.id,u]))),Object.assign(o.value,Object.fromEntries(L.map(u=>[u.id,u])))}catch(r){console.error("Failed to load stats:",r)}finally{g.value=!1}};return console.debug("stats init scheduled"),v(async()=>{console.debug("stats init started");try{await l()}catch(r){console.error("stats init error",r)}console.debug("stats init finished")}),{habitLogs:n,routineLogs:o,loadStats:l,statsLoading:g}},j=()=>{const{habitLogs:n,routineLogs:o,loadStats:g,statsLoading:l}=y();return{habitLogs:n,routineLogs:o,statsLoading:l,getRoutineLog:async t=>{if(o.value[t]!==void 0)return o.value[t];const a=await e.routineLogs.get(t);if(a===void 0)throw new Error(`RoutineLog not found: ${t}`);return o.value[t]=a,a},createRoutineLog:async(t,a=[])=>{let i=h("routinelog");const s={id:i,routineId:t,date:f(),habitLogIds:a};return await e.routineLogs.add(s),o.value[i]=s,i},updateRoutineLog:async(t,a)=>{await e.routineLogs.update(t,a),o.value[t]={...o.value[t],...a}},createHabitLog:async(t,a,i,s,w=f())=>{let c=h("habitlog");const b={id:c,habitId:t,status:a,durationSec:i,asPartOfRoutineLog:s,date:w};return e.transaction("rw",e.habitLogs,e.routineLogs,async()=>{s!==null&&await e.routineLogs.where("id").equals(s).modify(p=>{p.habitLogIds.push(c)}),await e.habitLogs.add(b)}),s!==null&&o.value[s].habitLogIds.push(c),n.value[c]=b,c},updateHabitLog:async(t,a)=>{await e.habitLogs.update(t,a),n.value[t]={...n.value[t],...a}},updateExecutionDates:async(t,a)=>{const i=o.value[t];if(i===void 0)throw new Error(`RoutineLog not found: ${t}`);await e.transaction("rw",e.routineLogs,e.habitLogs,async()=>{await e.routineLogs.update(t,{date:a});for(const s of i.habitLogIds)await e.habitLogs.update(s,{date:a})}),o.value[t].date=a,o.value[t].habitLogIds.forEach(s=>{n.value[s].date=a})}}};export{f as g,j as u};
