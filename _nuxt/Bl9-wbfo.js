import{d as e}from"./5hOz_2Hu.js";import{u as O,a as g,g as x}from"./0Oi62ugD.js";import{bT as T,bs as b}from"./Cbub-tNu.js";const A=()=>{const i=g("routines",()=>({})),l=g("routines-loading",()=>!0),h=async()=>{console.log("routines loading"),l.value=!0;try{const u=await e.routines.toArray();Object.assign(i.value,Object.fromEntries(u.map(I=>[I.id,I])))}catch(u){console.error("Failed to load routines:",u)}finally{l.value=!1}};return console.debug("routines init scheduled"),T(async()=>{console.debug("routines init started");try{await h()}catch(u){console.error("routines init error",u)}console.debug("routines init finished")}),{routines:i,loadRoutines:h,routinesLoading:l}},E=()=>{const{routines:i,loadRoutines:l,routinesLoading:h}=A(),{linkHabitToRoutine:u,unlinkHabitFromRoutine:I,habits:m}=O(),v=async n=>{const t=x("routine"),a={id:t,title:n,habitInstances:[]};try{await e.routines.add(a),i.value[t]=a}catch(s){console.error("Failed to add habit:",s)}},R=async(n,t,a)=>{var f;const s=i.value[n];if(!s)return;const o=s.habitInstances.filter(w=>w.habitId===t).length,c=`${t}-${o}`,r=a??((f=m.value[t])==null?void 0:f.targetDurationSec);if(r===void 0||r===0)throw new Error("NO_HABIT_DURATION");const d={habitInstanceId:c,habitId:t,durationSec:r};try{await e.transaction("rw",e.routines,e.habits,async()=>{const p=[...b(s.habitInstances.map(F=>b(F))),d];console.log(p),await e.routines.update(n,{habitInstances:p}),await u(t,n)}),s.habitInstances.push(d)}catch(w){console.error("Failed to add habit instance:",w)}},H=async(n,t,a)=>{const s=i.value[n];if(!s)return;const o=s.habitInstances.findIndex(r=>r.habitInstanceId===t);if(o===-1)return;const c={...b(s.habitInstances[o]),...a};try{await e.transaction("rw",e.routines,e.habits,async()=>{const r=s.habitInstances.map(d=>d.habitInstanceId===t?c:b(d));await e.routines.update(n,{habitInstances:r})}),s.habitInstances[o]=c}catch(r){console.error("Failed to update habit instance:",r)}},y=async(n,t)=>{const a=i.value[n];if(!a)return;const s=a.habitInstances.find(o=>o.habitInstanceId===t);if(s)try{await e.transaction("rw",e.routines,e.habits,async()=>{const o=a.habitInstances.filter(c=>c.habitInstanceId!==t).map(c=>b(c));console.log(o),await e.routines.update(n,{habitInstances:o}),await I(s.habitId,n)}),a.habitInstances=a.habitInstances.filter(o=>o.habitInstanceId!==t)}catch(o){console.error("Failed to remove habit instance:",o)}};return{routines:i,routinesLoading:h,addRoutine:v,addHabitInstanceToRoutine:R,removeHabitInstance:y,reOrderHabitsInRoutine:async(n,t)=>{try{const a=b(t.map(s=>b(s)));await e.routines.update(n,{habitInstances:a}),i.value[n].habitInstances=t}catch(a){console.error("Failed to reorder habits in routine: ",a)}},removeRoutine:async n=>{const t=i.value[n];if(t)try{await e.transaction("rw",e.routines,e.habits,async()=>{for(const a of t.habitInstances)await y(n,a.habitInstanceId);await e.routines.delete(n)}),delete i.value[n]}catch(a){console.error("Failed to remove routine:",a)}},updateHabitInstance:H}};export{E as u};
