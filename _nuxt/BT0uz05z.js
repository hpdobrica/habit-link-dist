import{d as n}from"./CAFlqnyI.js";import{u as x,a as m,g as O}from"./CRtozIMk.js";import{U as T,V as b}from"./muPwLYSL.js";const A=()=>{const i=m("routines",()=>({})),l=m("routines-loading",()=>!0),h=async()=>{l.value=!0;try{const u=await n.routines.toArray();Object.assign(i.value,Object.fromEntries(u.map(I=>[I.id,I])))}catch(u){console.error("Failed to load routines:",u)}finally{l.value=!1}};return console.debug("routines init scheduled"),T(async()=>{console.debug("routines init started");try{await h()}catch(u){console.error("routines init error",u)}console.debug("routines init finished")}),{routines:i,loadRoutines:h,routinesLoading:l}},D=()=>{const{routines:i,loadRoutines:l,routinesLoading:h}=A(),{linkHabitToRoutine:u,unlinkHabitFromRoutine:I,habits:g}=x(),v=async a=>{const t=O("routine"),e={id:t,title:a,habitInstances:[]};try{await n.routines.add(e),i.value[t]=e}catch(s){console.error("Failed to add habit:",s)}},R=async(a,t,e)=>{var y;const s=i.value[a];if(!s)return;const o=s.habitInstances.filter(w=>w.habitId===t).length,c=`${t}-${o}`,r=e??((y=g.value[t])==null?void 0:y.targetDurationSec);if(r===void 0||r===0)throw new Error("NO_HABIT_DURATION");const d={habitInstanceId:c,habitId:t,durationSec:r};try{await n.transaction("rw",n.routines,n.habits,async()=>{const p=[...b(s.habitInstances.map(F=>b(F))),d];console.log(p),await n.routines.update(a,{habitInstances:p}),await u(t,a)}),s.habitInstances.push(d)}catch(w){console.error("Failed to add habit instance:",w)}},H=async(a,t,e)=>{const s=i.value[a];if(!s)return;const o=s.habitInstances.findIndex(r=>r.habitInstanceId===t);if(o===-1)return;const c={...b(s.habitInstances[o]),...e};try{await n.transaction("rw",n.routines,n.habits,async()=>{const r=s.habitInstances.map(d=>d.habitInstanceId===t?c:b(d));await n.routines.update(a,{habitInstances:r})}),s.habitInstances[o]=c}catch(r){console.error("Failed to update habit instance:",r)}},f=async(a,t)=>{const e=i.value[a];if(!e)return;const s=e.habitInstances.find(o=>o.habitInstanceId===t);if(s)try{await n.transaction("rw",n.routines,n.habits,async()=>{const o=e.habitInstances.filter(c=>c.habitInstanceId!==t).map(c=>b(c));console.log(o),await n.routines.update(a,{habitInstances:o}),await I(s.habitId,a)}),e.habitInstances=e.habitInstances.filter(o=>o.habitInstanceId!==t)}catch(o){console.error("Failed to remove habit instance:",o)}};return{routines:i,routinesLoading:h,addRoutine:v,addHabitInstanceToRoutine:R,removeHabitInstance:f,removeRoutine:async a=>{const t=i.value[a];if(t)try{await n.transaction("rw",n.routines,n.habits,async()=>{for(const e of t.habitInstances)await f(a,e.habitInstanceId);await n.routines.delete(a)}),delete i.value[a]}catch(e){console.error("Failed to remove routine:",e)}},updateHabitInstance:H}};export{D as u};
