import{b as v,a as S,g as k,i as u,h as T,j as d,l as M,k as E,f as O}from"./Apea5fV0.js";import{d as r}from"./BkI_4SxB.js";import{bu as I}from"./BDOKz9Zs.js";let w=null;const $=()=>(w||(w=A()),w),A=()=>{const e=v(),l=S();console.log("routineManager created");const p=async t=>{const n={id:k("routine"),title:t,habitInstances:[]};try{await r.routines.add(n),e.add(n)}catch(s){console.error("Failed to add habit:",s)}},g=async t=>e.get(t)||await u(t),y=async(t,a,n)=>{const s=e.get(t)||await u(t);if(!s)return;const o=s.habitInstances.filter(b=>b.habitId===a).length,c=`${a}-${o}`,h=l.getHabit(a)||await T(a),i=n??h.targetDurationSec;if(i===void 0||i===0)throw new Error("NO_HABIT_DURATION");const x={habitInstanceId:c,habitId:a,durationSec:i},f=[...I(s.habitInstances.map(b=>I(b))),x];try{await r.transaction("rw",r.routines,r.habits,async()=>{await d(t,{habitInstances:f}),await M(a,t)}),e.update(t,{habitInstances:f}),l.linkHabitToRoutine(a,t)}catch(b){console.error("Failed to add habit instance:",b)}},H=async(t,a,n)=>{const s=e.get(t)||await u(t);if(!s)return;const o=s.habitInstances.findIndex(i=>i.habitInstanceId===a);if(o===-1)return;const c={...I(s.habitInstances[o]),...n},h=s.habitInstances.map(i=>i.habitInstanceId===a?c:i);try{await d(t,{habitInstances:h}),e.update(t,{habitInstances:h})}catch(i){console.error("Failed to update habit instance:",i)}},m=async(t,a)=>{const n=e.get(t)||await u(t);if(!n||n.habitInstances.findIndex(c=>c.habitInstanceId===a)===-1)return;const o=n.habitInstances.filter(c=>c.habitInstanceId!==a);try{await d(t,{habitInstances:o}),e.update(t,{habitInstances:o})}catch(c){console.error("Failed to remove habit instance:",c)}},R=async(t,a)=>{if(e.get(t)||await u(t))try{await d(t,{habitInstances:a}),e.update(t,{habitInstances:a})}catch(s){console.error("Failed to update habit instance:",s)}},F=async t=>{try{const a=await g(t);if(!a)return;r.transaction("rw",r.routines,r.habits,async()=>{await E(t),a.habitInstances.forEach(async n=>{await O(n.habitId,t)})}),e.remove(t),a.habitInstances.forEach(async n=>{l.unlinkHabitFromRoutine(n.habitId,t)})}catch(a){console.error("Failed to remove routine:",a)}};return{routines:e.routines,routinesLoading:e.routinesLoading,getRoutine:g,addRoutine:p,removeRoutine:F,addHabitInstanceToRoutine:y,updateHabitInstance:H,removeHabitInstance:m,reOrderHabitsInRoutine:R}};export{$ as u};
