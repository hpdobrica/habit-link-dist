import{u as F,a as m,g as T,d as e}from"./DwPDQxx0.js";import{S as O,T as w}from"./BFXac21V.js";const S=()=>{const o=m("routines",()=>({})),u=m("routines-loading",()=>!0),l=async()=>{u.value=!0;try{const r=await e.routines.toArray();Object.assign(o.value,Object.fromEntries(r.map(d=>[d.id,d])))}catch(r){console.error("Failed to load routines:",r)}finally{u.value=!1}};return console.debug("routines init scheduled"),O(async()=>{console.debug("routines init started");try{await l()}catch(r){console.error("routines init error",r)}console.debug("routines init finished")}),{routines:o,loadRoutines:l,routinesLoading:u}},j=()=>{const{routines:o,loadRoutines:u,routinesLoading:l}=S(),{linkHabitToRoutine:r,unlinkHabitFromRoutine:d,habits:v}=F(),R=async n=>{const t=T("routine"),a={id:t,title:n,habitInstances:[]};try{await e.routines.add(a),o.value[t]=a}catch(i){console.error("Failed to add habit:",i)}},p=async(n,t,a)=>{var y;const i=o.value[n];if(!i)return;const s=i.habitInstances.filter(b=>b.habitId===t).length,c=`${t}-${s}`,h=a??((y=v.value[t])==null?void 0:y.targetDurationSec);if(h===void 0||h===0)throw new Error("NO_HABIT_DURATION");const f={habitInstanceId:c,habitId:t,durationSec:h};try{await e.transaction("rw",e.routines,e.habits,async()=>{const g=[...w(i.habitInstances.map(H=>w(H))),f];console.log(g),await e.routines.update(n,{habitInstances:g}),await r(t,n)}),i.habitInstances.push(f)}catch(b){console.error("Failed to add habit instance:",b)}},I=async(n,t)=>{const a=o.value[n];if(!a)return;const i=a.habitInstances.find(s=>s.habitInstanceId===t);if(i)try{await e.transaction("rw",e.routines,e.habits,async()=>{const s=a.habitInstances.filter(c=>c.habitInstanceId!==t).map(c=>w(c));console.log(s),await e.routines.update(n,{habitInstances:s}),await d(i.habitId,n)}),a.habitInstances=a.habitInstances.filter(s=>s.habitInstanceId!==t)}catch(s){console.error("Failed to remove habit instance:",s)}};return{routines:o,routinesLoading:l,addRoutine:R,addHabitInstanceToRoutine:p,removeHabitInstance:I,removeRoutine:async n=>{const t=o.value[n];if(t)try{await e.transaction("rw",e.routines,e.habits,async()=>{for(const a of t.habitInstances)await I(n,a.habitInstanceId);await e.routines.delete(n)}),delete o.value[n]}catch(a){console.error("Failed to remove routine:",a)}}}};export{j as u};
